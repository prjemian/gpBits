# Guarneri-style device YAML configuration

# Objects only available at APS

# apstools.devices.SimulatedApsPssShutterWithStatus:
# - name: shutter
#   labels: ["shutters"]

apstools.synApps.Optics2Slit2D_HV:
- name: slit1
  prefix: gp:Slit1
  labels: [ "slits", "baseline" ]

apstools.synApps.SscanDevice: [ { name: scans, prefix: "gp:" } ]
# apstools.synApps.UserCalcoutDevice: [{ name: user_calcouts, prefix: "gp:" }]
apstools.synApps.UserCalcsDevice: [ { name: user_calcs, prefix: "gp:" } ]
# apstools.synApps.UserStringSequenceDevice: [{ name: user_sseqs, prefix: "gp:" }]
apstools.synApps.UserTransformsDevice: [ { name: user_transforms, prefix: "gp:" } ]

# TODO: https://github.com/BCDA-APS/BITS/issues/92
# See: https://github.com/bluesky/hklpy2/issues/69
# which means "import gi before matplotlib"
# This will solve it locally:
# conda env config vars set LD_LIBRARY_PATH="${CONDA_PREFIX}/lib"
hklpy2.creator:
- name: fourc
  geometry: E4CV
  prefix: "zgp:"
  labels: [ "diffractometer", "hklpy2" ]
  reals:
    # MUST provide in canonical order
    omega: m30
    chi: m31
    phi: m32
    tth: m29
- name: psic
  geometry: E6C
  prefix: "zgp:"
  labels: [ "diffractometer", "hklpy2" ]
  reals:
    # MUST provide in canonical order
    # No defined motor assignments, pick different than fourc (m29-32)
    mu: m23
    eta: m24
    chi: m25
    phi: m26
    nu: m27
    delta: m28
- name: sim4c
  geometry: E4CV
  labels: [ "diffractometer", "hklpy2" ]
- name: sim6c
  geometry: E6C
  labels: [ "diffractometer", "hklpy2" ]
- name: simk6c
  geometry: K6C
  labels: [ "diffractometer", "hklpy2" ]

instrument.devices.factories.motors:
# gp:m5 & gp:m6 reserved by gp:Slit1
# gp:m23 .. gp:m28 used by psic
# gp:m29 .. gp:m32 used by fourc
# gp:m45 .. gp:m47 used by monochromator
- { prefix: "gp:m", first: 1, last: 4, labels: [ "motor" ] }
- { prefix: "gp:m", first: 7, last: 22, labels: [ "motor" ] }
- { prefix: "gp:m", first: 33, last: 44, labels: [ "motor" ] }
- { prefix: "gp:m", first: 48, last: 56, labels: [ "motor" ] }

instrument.devices.ioc_stats.IocInfoDevice: [ { name: gp_stats, prefix: "gp:" } ]

instrument.devices.kohzu_monochromator.KohzuDCM:
- name: dcm
  prefix: "gp:"
  labels: [ "monochromator", baseline ]
  m_th: m45
  m_y: m46
  m_z: m47

instrument.devices.scaler.ScalerCH:
- name: scaler1
  prefix: gp:scaler1
  labels: [ "scalers", "detectors" ]

instrument.devices.temperature_signal.TemperaturePositioner:
- name: temperature
  prefix: gp:userCalc8
  egu: C
  limits: [ -20, 255 ]

ophyd.EpicsSignal:
- name: scan_id_epics
  read_pv: gp:gp:int20
  labels: [ "scan_id" ]

ophyd.EpicsSignalRO:
- name: noisy
  read_pv: gp:userCalc1
  labels: [ "detectors", "simulator" ]
